/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package findingnumber;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;
/**
 *
 * @author 01693
 */
public class Main extends javax.swing.JFrame {
    private String username;
    
    private Socket databaseSocket;
    private Socket gameSocket;
    private PrintWriter databaseOut;
    private BufferedReader databaseIn;
    private PrintWriter gameOut;
    private BufferedReader gameIn;
    public Main(String username) {
        this.username = username;
        initComponents();
        connectToDatabaseServer();
        connectToGameServer();
      
    }
    /**
     * Creates new form Lobby
     */

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton_CreateRoom = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Chơi đơn");
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton_CreateRoom.setText("Tạo phòng");
        jButton_CreateRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CreateRoomActionPerformed(evt);
            }
        });

        jButton3.setText("Chơi mạng");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(140, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton_CreateRoom, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                .addContainerGap(140, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(124, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_CreateRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
                System.out.println("Chơi button clicked");
                 SinglePlay form = new SinglePlay();
                  form.setVisible(true);
                  form.pack();
                  form.setLocationRelativeTo(null);
                  //close the login form
                  this.dispose();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton_CreateRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CreateRoomActionPerformed
        // TODO add your handling code here:
                System.out.println("chơi mạng button clicked");
                  Room form = new Room();
                  form.setVisible(true);
                  form.pack();
                  form.setLocationRelativeTo(null);
                  //close the login form
                  this.dispose();

    }//GEN-LAST:event_jButton_CreateRoomActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
  
        java.awt.EventQueue.invokeLater(new Runnable() {
             public void run() {
                new Login().setVisible(true);
            }
            
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton_CreateRoom;
    // End of variables declaration//GEN-END:variables

 

    
    private void connectToDatabaseServer() {
       try {
            databaseSocket = new Socket("localhost", 12345);
            databaseOut = new PrintWriter(new OutputStreamWriter(databaseSocket.getOutputStream()), true);
            databaseIn = new BufferedReader(new InputStreamReader(databaseSocket.getInputStream()));

            // Gửi yêu cầu kiểm tra kết nối đến server cơ sở dữ liệu
            databaseOut.println("CHECK_CONNECTION");

            // Luồng riêng để nhận phản hồi từ server
            new Thread(() -> {
                try {
                    String response;
                    while ((response = databaseIn.readLine()) != null) {
                        if ("CONNECTION_OK".equals(response)) {
                            System.out.println("Database connection is OK");
                        } else {
                            System.out.println("Failed to connect to database");
                        }
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }).start();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void connectToGameServer() {
      try {
          gameSocket = new Socket("localhost", 12346);
          gameOut = new PrintWriter(new OutputStreamWriter(gameSocket.getOutputStream()), true);
          gameIn = new BufferedReader(new InputStreamReader(gameSocket.getInputStream()));

          // Gửi yêu cầu kiểm tra kết nối đến server trò chơi
          gameOut.println("CHECK_GAME_CONNECTION");
          System.out.println("Sent CHECK_GAME_CONNECTION request");

          // Luồng riêng để nhận phản hồi từ server
          new Thread(() -> {
              try {
                  String response;
                  while ((response = gameIn.readLine()) != null) {
                      System.out.println("Received response: " + response);
                      if ("GAME_CONNECTION_OK".equals(response)) {
                          System.out.println("Game server connection is OK");
                      } else {
                          System.out.println("Failed to connect to game server");
                      }
                  }
              } catch (IOException e) {
                  e.printStackTrace();
              }
          }).start();

      } catch (IOException e) {
          e.printStackTrace();
          System.out.println("Failed to connect to game server: " + e.getMessage());
      }
  }
    
    public boolean authenticate(String username, String password) {
        try {
            databaseOut.println("LOGIN");
            databaseOut.println(username);
            databaseOut.println(password);

            String response = databaseIn.readLine();
            return "LOGIN_SUCCESS".equals(response);
        } catch (IOException ex) {
            ex.printStackTrace();
            return false;
        }
    }
}
